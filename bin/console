#!/usr/bin/env php
<?php

use Dradisic\KafkaSchema\Kernel;
use Symfony\Component\Console\Application;
use Symfony\Component\Console\Input\ArgvInput;
if (!is_file(dirname(__DIR__).'/vendor/autoload.php')) {
    throw new LogicException('Dependencies are missing. Try running "composer install".');
}

require dirname(__DIR__).'/vendor/autoload.php';

if (!class_exists(Application::class)) {
    throw new LogicException('You need to add "symfony/console" as a Composer dependency.');
}

$input = new ArgvInput();
if (null !== $env = $input->getParameterOption(['--env', '-e'], null, true)) {
    putenv('APP_ENV='.$_SERVER['APP_ENV'] = $_ENV['APP_ENV'] = $env);
}

if ($input->hasParameterOption('--no-debug', true)) {
    putenv('APP_DEBUG='.$_SERVER['APP_DEBUG'] = $_ENV['APP_DEBUG'] = '0');
}

// Load environment variables from .env file if it exists
$envFile = dirname(__DIR__).'/.env';
if (is_file($envFile)) {
    $envContent = file_get_contents($envFile);
    foreach (explode("\n", $envContent) as $line) {
        $line = trim($line);
        if ($line && strpos($line, '=') !== false && strpos($line, '#') !== 0) {
            [$key, $value] = explode('=', $line, 2);
            $_ENV[trim($key)] = trim($value);
            $_SERVER[trim($key)] = trim($value);
        }
    }
}

// Simple console application without full Symfony framework
// For full dependency injection, use bin/schema-console instead

$application = new Application('Schema Registry Console (Simple)', '1.1.0');

// Manually instantiate services (without DI container)
$schemasDirectory = dirname(__DIR__) . '/schemas';
$schemaStore = new \Dradisic\KafkaSchema\Schema\SchemaStore($schemasDirectory);
$metadataManager = new \Dradisic\KafkaSchema\Schema\SchemaMetadataManager($schemaStore);
$schemaManager = new \Dradisic\KafkaSchema\Service\SchemaManager($schemaStore, $metadataManager);

// Add commands manually
$application->add(new \Dradisic\KafkaSchema\Command\SchemaListCommand($schemaStore, $metadataManager));
$application->add(new \Dradisic\KafkaSchema\Command\SchemaValidateCommand($schemaManager));
$application->add(new \Dradisic\KafkaSchema\Command\SchemaMigrationCommand($schemaStore, $metadataManager, $schemaManager));

$application->run($input);